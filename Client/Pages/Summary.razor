@page "/summary"

@inject IJSRuntime JSRuntime
@using CoreBeliefsSurvey.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json

<style>
    .response-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px;
        margin-right: 8px;
        border-radius: 4px;
    }

    .red {
        background-color: red;
    }

    .orange {
        background-color: orange;
    }

    .white {
        background-color: white;
    }

    .yellow {
        background-color: yellow;
    }

    .green {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(even) {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(odd) {
        background-color: white;
    }

    .custom-row-colors .k-grid-table .k-master-row:hover {
        background-color: antiquewhite;
    }    
</style>

<h3>Summary</h3>

@if (beliefResponses != null)
{
    <TelerikGridLayout>
        <GridLayoutColumns>
            <GridLayoutColumn Width="1fr"></GridLayoutColumn>
            <GridLayoutColumn Width="7fr"></GridLayoutColumn>
            <GridLayoutColumn Width="12fr"></GridLayoutColumn>
        </GridLayoutColumns>
        <GridLayoutRows>
            <GridLayoutRow Height="auto"></GridLayoutRow>
        </GridLayoutRows>
        <GridLayoutItems>
            @foreach (var beliefResponse in beliefResponses)
            {
                var belief = beliefResponse.Belief;
                var selectedValue = beliefResponse.SelectedValue;
                var isPositive = belief.IsPositive;

                <GridLayoutItem>
                    <div class="response-icon-container @GetBackgroundColorClass(selectedValue)">
                        @GetResponseIcon(selectedValue, isPositive)
                    </div>
                </GridLayoutItem>

                <GridLayoutItem>
                    <div class="belief-info">
                        <div class="belief-name" title="@belief.BeliefDescription">
                            <span>@belief.BeliefName</span>
                            <i class="far fa-question-circle question-mark-icon" title="@belief.BeliefDescription"></i>
                        </div>
                    </div>
                </GridLayoutItem>
                <GridLayoutItem>
                    <div class="response-text">@GetResponseText(selectedValue)</div>
                </GridLayoutItem>
            }
        </GridLayoutItems>
    </TelerikGridLayout>


    <p>Questions answered: @beliefResponses.Count of @filteredBeliefs.Length</p>

    <button class="btn btn-primary" @onclick="NavigateToIndex">Go Back</button>
}
else
{
    <p>No belief responses found.</p>
}

@code {
    private List<CoreBeliefResponse> beliefResponses;
    private CoreBelief[] filteredBeliefs;

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var beliefResponsesJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "beliefResponses");
        if (!string.IsNullOrEmpty(beliefResponsesJson))
            beliefResponses = JsonSerializer.Deserialize<List<CoreBeliefResponse>>(beliefResponsesJson);

        filteredBeliefs = beliefResponses?.Select(response => response.Belief).ToArray();
    }

    private string GetBackgroundColorClass(int selectedValue)
    {
        switch (selectedValue)
        {
            case 1:
                return "red";
            case 2:
                return "orange";
            case 3:
                return "white";
            case 4:
                return "yellow";
            case 5:
                return "green";
            default:
                return string.Empty;
        }
    }

    private MarkupString GetResponseIcon(int selectedValue, bool isPositive)
    {
        string icon = string.Empty;

        if (selectedValue == 3)
        {
            icon = "<i class=\"far fa-meh\"></i>";
        }
        else if (isPositive)
        {
            if (selectedValue == 1)
            {
                icon = "<i class=\"far fa-frown-open\"></i>";
            }
            else if (selectedValue == 2)
            {
                icon = "<i class=\"far fa-frown\"></i>";
            }
            else if (selectedValue == 3)
            {
                icon = "<i class=\"far fa-meh-blank\"></i>";
            }
            else if (selectedValue == 4)
            {
                icon = "<i class=\"far fa-smile\"></i>";
            }
            else if (selectedValue >= 5)
            {
                icon = "<i class=\"far fa-smile-beam\"></i>";
            }
        }
        else
        {
            if (selectedValue == 1)
            {
                icon = "<i class=\"far fa-thumbs-up\"></i>";
            }
            else if (selectedValue == 2)
            {
                icon = "<i class=\"far fa-thumbs-up\"></i>";
            }
            else if (selectedValue == 3)
            {
                icon = "<i class=\"far fa-smile\"></i>";
            }
            else if (selectedValue == 4)
            {
                icon = "<i class=\"far fa-meh-blank\"></i>";
            }
            else if (selectedValue >= 5)
            {
                icon = "<i class=\"far fa-thumbs-down\"></i>";
            }
        }

        return new MarkupString(icon);
    }

    private string GetResponseText(int selectedValue)
    {
        string text = string.Empty;

        if (selectedValue == 1)
        {
            text = "Disagree";
        }
        else if (selectedValue == 2)
        {
            text = "Somewhat Disagree";
        }
        else if (selectedValue == 3)
        {
            text = "Neutral";
        }
        else if (selectedValue == 4)
        {
            text = "Somewhat Agree";
        }
        else if (selectedValue == 5)
        {
            text = "Agree";
        }

        return text;
    }

    private void NavigateToIndex()
    {
        NavManager.NavigateTo("/");
    }
}
