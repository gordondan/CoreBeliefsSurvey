@page "/summary"

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ILogger<Summary> _logger

@using CoreBeliefsSurvey.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.IO;
@using System.Text;
@using Microsoft.Extensions.Logging;
@using Telerik.SvgIcons

<style>
    .response-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px;
        margin-right: 8px;
        border-radius: 4px;
    }

    .red {
        background-color: red;
    }

    .orange {
        background-color: orange;
    }

    .white {
        background-color: white;
    }

    .yellow {
        background-color: yellow;
    }

    .green {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(even) {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(odd) {
        background-color: white;
    }

    .custom-row-colors .k-grid-table .k-master-row:hover {
        background-color: antiquewhite;
    }    
</style>

<h3>Summary</h3>

@if (GridData != null)
{
    <TelerikGrid Data=@GridData Pageable="true" Sortable="true"
                 FilterMode="GridFilterMode.FilterMenu" Resizable="true" Reorderable="true" PageSize="25">
        <GridToolBarTemplate>
            <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
        </GridToolBarTemplate>
        <GridExport>
            <GridExcelExport FileName="summary-grid-export" AllPages="true" />
        </GridExport>
        <GridColumns>
            <GridColumn Field="@nameof(GridDataRow.Positivity)" Title="Positivity" Width="5%" OnCellRender="@OnCellRenderHandler" />
            <GridColumn Field="@nameof(GridDataRow.Icon)" Title="" Width="5%" />
            <GridColumn Field="@nameof(GridDataRow.Belief)" Title="Belief" Width="60%" />
            <GridColumn Field="@nameof(GridDataRow.SelectedValueText)" Title="Response" Width="30%" />
        </GridColumns>
    </TelerikGrid>



    <br/>

    <div class="btn-wrapper">
        <TelerikButton OnClick="@OnViewPdfButtonClick">
            <i class="fas fa-file-pdf"></i> View PDF
        </TelerikButton>
    </div>
    <br/>
    <br/>
    <button class="btn btn-primary" @onclick="NavigateToIndex">Go Back</button>
}
else
{
    <p>No belief responses found.</p>
}

@code {
    private CoreBelief[] filteredBeliefs;
    private List<GridDataRow> GridData;
    private List<CoreBeliefResponse> beliefResponses;

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var beliefResponsesJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "beliefResponses");
        if (!string.IsNullOrEmpty(beliefResponsesJson))
            beliefResponses = JsonSerializer.Deserialize<List<CoreBeliefResponse>>(beliefResponsesJson);
        GridData = beliefResponses.Select(response => new GridDataRow
            {
                Belief = response.Belief.BeliefName,
                IsPositive = response.Belief.IsPositive,
                SelectedValue = response.SelectedValue
            }).ToList();
        filteredBeliefs = beliefResponses?.Select(response => response.Belief).ToArray();
    }

    private void LogError(string errorMessage)
    {
        // Logging logic to log the error message
        // Replace with your actual logging implementation
        Console.WriteLine($"Error: {errorMessage}");
    }




    /// <summary>
    /// Handles the view PDF button click. It serializes the belief responses,
    /// sends a POST request to the PDF generation API, and navigates to the
    /// PDF viewer page with the generated PDF Id.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnViewPdfButtonClick()
    {
        try
        {
            string beliefsJson = JsonSerializer.Serialize(beliefResponses);
            var content = new StringContent(beliefsJson, Encoding.UTF8, "application/json");

            // Logging the start of the HTTP request
            _logger.LogInformation("Starting POST request to /api/pdf");

            var response = await Http.PostAsync("/api/pdf", content);

            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                byte[] pdfBytes;
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    pdfBytes = memoryStream.ToArray();
                }
                var pdfBase64 = Convert.ToBase64String(pdfBytes);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "pdfData", pdfBase64);
                NavManager.NavigateTo("/pdfviewer");
            }
            else
            {
                // Error handling for unsuccessful HTTP response
                var errorMessage = $"Failed to generate PDF. HTTP status code: {response.StatusCode}";
                _logger.LogError(errorMessage);
                // Display an error message to the user or try to recover from the error appropriately
            }
        }
        catch (Exception ex)
        {
            // Log the exception and handle it
            _logger.LogError(ex, "An error occurred while trying to view the PDF.");
            // Handle the exception in a way that is appropriate for your application,
            // such as showing an error message to the user or trying to recover from the error
        }
    }

    public void OnCellRenderHandler(GridCellRenderEventArgs args)
    {
        // Check for the positivity value
        if (int.TryParse(args.Value?.ToString(), out int positivity))
        {
            switch (positivity)
            {
                case 1:
                    args.Class = "red";
                    break;
                case 2:
                    args.Class = "orange";
                    break;
                case 3:
                    args.Class = "black";
                    break;
                case 4:
                    args.Class = "yellow";
                    break;
                case 5:
                    args.Class = "green";
                    break;
                default:
                // If neutral, color is black
                args.Class = "black";
                break;
            }
        }
        else
        {
            // If parsing fails, color is black
            args.Class = "neutral";
        }
    }



   private void NavigateToIndex()
    {
        NavManager.NavigateTo("/");
    }
}
