@page "/summary"

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ILogger<Summary> _logger

@using CoreBeliefsSurvey.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.IO;
@using System.Text;
@using Microsoft.Extensions.Logging;
<style>
    .response-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px;
        margin-right: 8px;
        border-radius: 4px;
    }

    .red {
        background-color: red;
    }

    .orange {
        background-color: orange;
    }

    .white {
        background-color: white;
    }

    .yellow {
        background-color: yellow;
    }

    .green {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(even) {
        background-color: green;
    }

    .custom-row-colors .k-grid-table .k-master-row:nth-child(odd) {
        background-color: white;
    }

    .custom-row-colors .k-grid-table .k-master-row:hover {
        background-color: antiquewhite;
    }    
</style>

<h3>Summary</h3>

@if (beliefResponses != null)
{
    <TelerikGridLayout>
        <GridLayoutColumns>
            <GridLayoutColumn Width="1fr"></GridLayoutColumn>
            <GridLayoutColumn Width="7fr"></GridLayoutColumn>
            <GridLayoutColumn Width="12fr"></GridLayoutColumn>
        </GridLayoutColumns>
        <GridLayoutRows>
            <GridLayoutRow Height="auto"></GridLayoutRow>
        </GridLayoutRows>
        <GridLayoutItems>
            @foreach (var beliefResponse in beliefResponses)
            {
                var belief = beliefResponse.Belief;
                var selectedValue = beliefResponse.SelectedValue;
                var isPositive = belief.IsPositive;

                <GridLayoutItem>
                    <div class="response-icon-container @GetBackgroundColorClass(selectedValue,belief.IsPositive)">
                        @GetResponseIcon(selectedValue, isPositive)
                    </div>
                </GridLayoutItem>

                <GridLayoutItem>
                    <div class="belief-info">
                        <div class="belief-name" title="@belief.BeliefDescription">
                            <span>@belief.BeliefName</span>
                            <i class="far fa-question-circle question-mark-icon" title="@belief.BeliefDescription"></i>
                        </div>
                    </div>
                </GridLayoutItem>
                <GridLayoutItem>
                    <div class="response-text">@GetResponseText(selectedValue)</div>
                </GridLayoutItem>
            }
        </GridLayoutItems>
    </TelerikGridLayout>

    <p>Questions answered: @beliefResponses.Count of @filteredBeliefs.Length</p>
    <div class="btn-wrapper">
        <TelerikButton OnClick="@OnViewPdfButtonClick">
            <i class="fas fa-file-pdf"></i> View PDF
        </TelerikButton>
    </div>

    <button class="btn btn-primary" @onclick="NavigateToIndex">Go Back</button>
}
else
{
    <p>No belief responses found.</p>
}

@code {
    private List<CoreBeliefResponse> beliefResponses;
    private CoreBelief[] filteredBeliefs;

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var beliefResponsesJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "beliefResponses");
        if (!string.IsNullOrEmpty(beliefResponsesJson))
            beliefResponses = JsonSerializer.Deserialize<List<CoreBeliefResponse>>(beliefResponsesJson);

        filteredBeliefs = beliefResponses?.Select(response => response.Belief).ToArray();
    }

    private string GetBackgroundColorClass(int selectedValue, bool isPositive)
    {
        int happyValue = isPositive ? selectedValue : 6 - selectedValue;

        switch (happyValue)
        {
            case 1:
                return "red"; // Red background color
            case 2:
                return "orange"; // Orange background color
            case 3:
                return "white"; // White background color
            case 4:
                return "yellow"; // Yellow background color
            case int value when value >= 5:
                return "green"; // Green background color
            default:
                return string.Empty;
        }
    }



    /// <summary>
    /// Returns the response icon markup based on the selected value and positivity.
    /// </summary>
    /// <param name="selectedValue">The selected value.</param>
    /// <param name="isPositive">Indicates whether the belief is positive.</param>
    /// <returns>The response icon markup.</returns>
    private MarkupString GetResponseIcon(int selectedValue, bool isPositive)
    {
        string icon = string.Empty;
        int happyValue = isPositive ? selectedValue : 6 - selectedValue;

        try
        {
            switch (happyValue)
            {
                case 1:
                    icon = "<i class=\"far fa-frown-open\"></i>";
                    break;
                case 2:
                    icon = "<i class=\"far fa-frown\"></i>";
                    break;
                case 3:
                    icon = "<i class=\"far fa-meh\"></i>";
                    break;
                case 4:
                    icon = "<i class=\"far fa-smile\"></i>";
                    break;
                case int value when value >= 5:
                    icon = "<i class=\"far fa-smile-beam\"></i>";
                    break;
                default:
                    // Handle invalid happyValue
                    LogError($"Invalid happyValue: {happyValue}");
                    break;
            }
        }
        catch (Exception ex)
        {
            // Handle any exception that might occur
            LogError($"An error occurred: {ex.Message}");
        }

        return new MarkupString(icon);
    }

    private void LogError(string errorMessage)
    {
        // Logging logic to log the error message
        // Replace with your actual logging implementation
        Console.WriteLine($"Error: {errorMessage}");
    }


    private string GetResponseText(int selectedValue)
    {
        string text = string.Empty;

        if (selectedValue == 1)
        {
            text = "Disagree";
        }
        else if (selectedValue == 2)
        {
            text = "Somewhat Disagree";
        }
        else if (selectedValue == 3)
        {
            text = "Neutral";
        }
        else if (selectedValue == 4)
        {
            text = "Somewhat Agree";
        }
        else if (selectedValue == 5)
        {
            text = "Agree";
        }

        return text;
    }

    /// <summary>
    /// Handles the view PDF button click. It serializes the belief responses,
    /// sends a POST request to the PDF generation API, and navigates to the
    /// PDF viewer page with the generated PDF Id.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnViewPdfButtonClick()
    {
        try
        {
            string beliefsJson = JsonSerializer.Serialize(beliefResponses);
            var content = new StringContent(beliefsJson, Encoding.UTF8, "application/json");

            // Logging the start of the HTTP request
            _logger.LogInformation("Starting POST request to /api/pdf");

            var response = await Http.PostAsync("/api/pdf", content);

            if (response.IsSuccessStatusCode)
            {
                var pdfId = await response.Content.ReadAsStringAsync();
                _logger.LogInformation($"PDF generation successful. PDF ID: {pdfId}");

                NavManager.NavigateTo($"/pdfviewer/{pdfId}");
            }
            else
            {
                // Error handling
                var errorMessage = $"Failed to generate PDF. HTTP status code: {response.StatusCode}";
                _logger.LogError(errorMessage);
                // Display an error message to the user or try to recover from the error appropriately
            }
        }
        catch (Exception ex)
        {
            // Log the exception and handle it
            _logger.LogError(ex, "An error occurred while trying to view the PDF.");
            // Handle the exception in a way that is appropriate for your application,
            // such as showing an error message to the user or trying to recover from the error
        }
    }



   private void NavigateToIndex()
    {
        NavManager.NavigateTo("/");
    }
}
