@page "/summary"
@inject IJSRuntime JSRuntime
@using CoreBeliefsSurvey.Shared.Models
@using Microsoft.AspNetCore.Components
@using System.Text.Json

<h3>Summary</h3>

@if (beliefResponses != null)
{
    <div class="belief-container">
        @foreach (var beliefResponse in beliefResponses)
        {
            var belief = beliefResponse.Belief;
            var selectedValue = beliefResponse.SelectedValue;
            var isPositive = belief.IsPositive;

            <div class="belief-card @(isPositive ? "positive" : "negative")">
                <div class="response-icon-container">
                    @GetResponseIcon(selectedValue, isPositive)
                </div>
                <div class="belief-info">
                    <div class="belief-name" title="@belief.BeliefDescription">
                        <span>@belief.BeliefName</span>
                        <span class="question-mark-icon" title="Click for Description">
                            <i class="far fa-question-circle"></i>
                        </span>
                    </div>
                    <div class="response-text">@GetResponseText(selectedValue)</div>
                </div>
            </div>
        }
    </div>

    <p>Questions answered: @beliefResponses.Count of @filteredBeliefs.Length</p>

    <button class="btn btn-primary" @onclick="NavigateToIndex">Go Back</button>
}
else
{
    <p>No belief responses found.</p>
}

@code {
    private List<CoreBeliefResponse> beliefResponses;
    private CoreBelief[] filteredBeliefs;

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var beliefResponsesJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "beliefResponses");
        if (!string.IsNullOrEmpty(beliefResponsesJson))
            beliefResponses = JsonSerializer.Deserialize<List<CoreBeliefResponse>>(beliefResponsesJson);

        filteredBeliefs = beliefResponses?.Select(response => response.Belief).ToArray();
    }

    private MarkupString GetResponseIcon(int selectedValue, bool isPositive)
    {
        string icon = string.Empty;

        if (selectedValue == 3)
        {
            icon = "<i class=\"far fa-meh\"></i>";
        }
        else if (isPositive)
        {
            if (selectedValue <= 2)
            {
                icon = "<i class=\"far fa-thumbs-down\"></i>";
            }
            else if (selectedValue == 3)
            {
                icon = "<i class=\"far fa-meh-blank\"></i>";
            }
            else if (selectedValue == 4)
            {
                icon = "<i class=\"far fa-smile\"></i>";
            }
            else if (selectedValue >= 5)
            {
                icon = "<i class=\"far fa-thumbs-up\"></i>";
            }
        }
        else
        {
            if (selectedValue <= 2)
            {
                icon = "<i class=\"far fa-thumbs-up\"></i>";
            }
            else if (selectedValue == 3)
            {
                icon = "<i class=\"far fa-smile\"></i>";
            }
            else if (selectedValue == 4)
            {
                icon = "<i class=\"far fa-meh-blank\"></i>";
            }
            else if (selectedValue >= 5)
            {
                icon = "<i class=\"far fa-thumbs-down\"></i>";
            }
        }

        return new MarkupString(icon);
    }

    private string GetResponseText(int selectedValue)
    {
        string text = string.Empty;

        if (selectedValue == 1)
        {
            text = "Disagree";
        }
        else if (selectedValue == 2)
        {
            text = "Somewhat Disagree";
        }
        else if (selectedValue == 3)
        {
            text = "Neutral";
        }
        else if (selectedValue == 4)
        {
            text = "Somewhat Agree";
        }
        else if (selectedValue == 5)
        {
            text = "Agree";
        }

        return text;
    }

    private void NavigateToIndex()
    {
        NavManager.NavigateTo("/");
    }
}
