@page "/"
@using CoreBeliefsSurvey.Shared.Models
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject NavigationManager NavManager

@if (!loadingBeliefs){
    @if (string.IsNullOrEmpty(selectedOption))
    {
        <p>How many questions would you like to answer?</p>
        <TelerikButtonGroup SelectionMode="@ButtonGroupSelectionMode.Single">
        <ButtonGroupToggleButton @onclick="() => BeliefNumberSelected(5)">5</ButtonGroupToggleButton>
        <ButtonGroupToggleButton @onclick="() => BeliefNumberSelected(10)">10</ButtonGroupToggleButton>
        <ButtonGroupToggleButton @onclick="() => BeliefNumberSelected(10)">25</ButtonGroupToggleButton>
        <ButtonGroupToggleButton @onclick="() => BeliefNumberSelected(10)">50</ButtonGroupToggleButton>
    <ButtonGroupToggleButton @onclick="() => BeliefNumberSelected(-1)">All</ButtonGroupToggleButton>
</TelerikButtonGroup>}
}
@if (loadingBeliefs)
{
    <p><em>Loading...</em></p>
}
else if (selectedOption != null)
{
    <h3>Beliefs</h3>

    <div class="belief-container">
        @foreach (var belief in filteredBeliefs)
        {
            <BeliefCard Belief="@belief" OnOptionSelected="(option) => HandleOptionSelected(option)" SelectedOption="beliefResponses.ContainsKey(belief) ? beliefResponses[belief].SelectedValue : 0" />

        }
    </div>

    <p>Questions answered: @questionsAnswered of @filteredBeliefs.Length</p>

    <button class="btn btn-primary" @onclick="NavigateToSummary">Submit</button>
}

@code {
    private CoreBelief[] allBeliefs;
    private CoreBelief[] filteredBeliefs;
    private string selectedOption;
    private int questionsAnswered = 0;
    private bool loadingBeliefs = true;
    private List<string> numberOfQuestionsOptions = new List<string> { "5", "10", "25", "50", "All" };
    private Dictionary<CoreBelief, CoreBeliefResponse> beliefResponses;

    protected override async Task OnInitializedAsync()
    {
        beliefResponses = new Dictionary<CoreBelief, CoreBeliefResponse>();
        await LoadBeliefs();
    }

    private async Task LoadBeliefs()
    {
        allBeliefs = await Http.GetFromJsonAsync<CoreBelief[]>("api/Beliefs");
        loadingBeliefs = false;
    }

    private void FilterBeliefs()
    {
        var random = new Random();
        var randomizedBeliefs = allBeliefs.OrderBy(x => random.Next()).ToArray();
        selectedOption = selectedOption ?? "All";
        filteredBeliefs = selectedOption == "All" ? randomizedBeliefs : randomizedBeliefs.Take(int.Parse(selectedOption)).ToArray();
        questionsAnswered = 0; // Reset the questions answered counter
    }
    
    private void HandleOptionSelected((CoreBelief Belief, int SelectedValue) option)
    {
        UpdateBeliefResponse(option.Belief, option.SelectedValue);
    }

    private void BeliefNumberSelected(int value)
    {
        questionsAnswered = 0;
        if (value < 0)
        {
            selectedOption = "All";
        }
        else
        {
            selectedOption = value.ToString();
        }
        FilterBeliefs();
    }

    public void UpdateBeliefResponse(CoreBelief belief, int selectedValue)
    {
        if (beliefResponses.ContainsKey(belief))
        {
            beliefResponses[belief].SelectedValue = selectedValue;
        }
        else
        {
            var beliefResponse = new CoreBeliefResponse
                {
                    Belief = belief,
                    SelectedValue = selectedValue
                };
            beliefResponses.Add(belief, beliefResponse);
        }
    }

    public CoreBeliefResponse GetBeliefResponse(CoreBelief belief)
    {
        if (beliefResponses.ContainsKey(belief))
        {
            return beliefResponses[belief];
        }
        return null;
    }

    private void NavigateToSummary()
    {
        NavManager.NavigateTo("/summary");
    }
}
